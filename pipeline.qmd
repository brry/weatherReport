---
title: "R data analysis pipeline"
author: "Berry Boessenkool"
format:
    html: 
       embed-resources: true
editor: source
---

This builds on the concepts from my [short course](https://github.com/brry/hour), look at that before this session!

## data info

Percentage of infants that are vaccinated per year and country. Data source: UNICEF Immunization coverage by antigen (country, regional, and global trends), see <https://data.unicef.org/resources/dataset/immunization/> and the [exact url](https://data.unicef.org/resources/data_explorer/unicef_f/?ag=UNICEF&df=GLOBAL_DATAFLOW&ver=1.0&dq=.IM_BCG+IMMUNISATION+IM_DTP1+IM_DTP3+IM_HEPB3+IM_HEPBB+IM_HIB3+IM_IPV1+IM_MCV1+IM_MCV2+IM_PCV3+IM_POL3+IM_RCV1+IM_ROTAC+IM_YFV..&startPeriod=2010&endPeriod=2020&lastnobservations=1)

```{r, packages}
if(!requireNamespace("berryFunctions")) install.packages("berryFunctions")
```


## read data

-   use the [zip file](vaccines.zip) containing txt files
-   conditionally (if not already done), unzip it to a folder with a good name
```{r, unzip_file}
if(!dir.exists("vaccines")) unzip("vaccines.zip", exdir="vaccines")
```

-   using `lapply` (or the `purr` equivalent), read the files with actual data
```{r, read_data}
filenames <- dir("vaccines", pattern="^vacc", full.names=TRUE)
vaccines <- lapply(filenames, read.table, header=TRUE, check.names=FALSE)
```

-   optionally, convert the list to an array (complicated, so code is provided:)

```{r, data_to_array, eval=TRUE}
countries <- read.delim("vaccines/countrycodes.txt")[,1] # iso3 countrycodes
arrayvacc <- lapply(vaccines, function(x) 
 {
 # dimensions must be expanded to include all countries in all datasets:
 y <- merge(x, data.frame(iso3=countries), all=TRUE)
 y$iso3 <- NULL
 y
 })
arrayvacc <- berryFunctions::l2array(arrayvacc)
names(dimnames(arrayvacc)) <- c("country", "year", "vaccine")
dimnames(arrayvacc)[[1]] <- countries
rm(countries)
dimnames(arrayvacc)[[3]] <- sub(".txt", "", sub("vaccines/vacc_", "", filenames))
```

## check data

-   Perform EDA (exploratory data analysis).
```{r, eda, eval=FALSE}
str(arrayvacc)
hist(arrayvacc[,,"BCG"])
hists <- sapply(dimnames(arrayvacc)[[3]], function(n)
	hist(arrayvacc[,,n], main=n, breaks=seq(0,100,5)))
```

-   Across all vaccines and countries, how many datapoints are avialable per year?
```{r, eda_ndatapoints}
notNA <- sapply(dimnames(arrayvacc)[[2]], function(y)
	sum(!is.na(arrayvacc[,y,])))
plot(as.numeric(names(notNA)), notNA)
```

-   For the year with most datapoints, visualize the distributions for each vaccine (histograms in a multipanel plot). Which vaccine has the largest variation among countries?
```{r}
View(arrayvacc[,"2022",])
par(mfrow=c(4,4), mar=c(2,2,1.5,0.1))
hists <- sapply(dimnames(arrayvacc)[[3]], function(v) hist(arrayvacc[,"2022",v], main=v, breaks=seq(0,100,5), col="salmon"))
```



## sanitize data

-   One dataset has an anomaly in the last year (2022).
```{r, anomaly}
View(arrayvacc[,,"BCG"])
View(arrayvacc["PRK",,])
```

-   What country is affected and does that happen for several vaccines?
-   How could you fix the issue?

Set PRK (North Korea) 2022 values that are zero to NA  
set alle PRK 2022 to NA  
ignore PRK completely (aggressive)

```{r, deal_with_PRK}
arrayvacc["PRK","2022",] <- NA
arrayvacc <- arrayvacc[-which(rownames(arrayvacc)=="PRK"),,]
```


## visualize data

Visualize the temporal development of vaccinated infants for each vaccine. Consider how to display the individual countries:

-   show aggregate only
```{r, vis_aggregate}
plot(1980:2022, apply(arrayvacc, 2, mean, na.rm=TRUE), type="l", lwd=2, ylim=c(40,100), las=1)
meanspervac <- apply(arrayvacc, 3, colMeans, na.rm=T)
for(i in 1:14) lines(1980:2022, meanspervac[,i], col="grey")
```


-   spaghetti plot with each country as a line
-   boxplots
-   proportion of well-vaccinated countries

## pipeline

-   How should you structure your code?
codefile structuring as in that lesson
unified approach
think ahead
use good software approaches / principles

-   Where can you deploy your code?
github readme (from qmd)
github.io
shinyapps.io




